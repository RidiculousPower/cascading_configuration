== Cascading Configuration

http://rubygems.org/gems/cascading-configuration

== Description

Adds methods for cascading configurations.

== Summary

Cascading configuration methods for single settings, arrays, hashes.

== :attr_configuration

:attr_configuration provides inheritable single-object configurations that cascades downward. The value lowest in the ancestor hierarchy will be returned.

:attr_class_configuration works like :attr_configuration but does not cascade to instances.

:attr_local_configuration works like :attr_configuration but only cascades to the first including class. Subclasses will inherit but value will not be resolved through ancestor chain.

:attr_instance_configuration works like :attr_configuration but is only defined in instances of defining object. This means Modules and Classes will have an instance method defined, and that Subclasses will inherit but value will not be resolved through ancestor chain.

:attr_object_configuration works like :attr_configuration but does not cascade. This is primarily useful for creating local configurations maintained in parallel with cascading configurations (for instance, with the same variable prefixes), for overriding the local configuration method, and for hiding the configuration variable.

== :attr_configuration_array

:attr_configuration_array provides inheritable array configurations that cascade downward. A composite sorted and unique array will be returned (merging downward from most distant ancestor to self). 

An internal cache is kept, and any configuration updates that occur to higher-level ancestors cascade immediately downward. 

The array maintained by :attr_configuration_array is kept ordered and unique.

:attr_class_configuration_array works like :attr_configuration_array but does not cascade to instances.

:attr_local_configuration_array works like :attr_configuration_array but only cascades to the first including class. Subclasses will inherit but value will not be resolved through ancestor chain.

:attr_instance_configuration_array works like :attr_configuration_array but is only defined in instances of defining object. This means Modules and Classes will have an instance method defined, and that Subclasses will inherit but value will not be resolved through ancestor chain.

:attr_object_configuration_array works like :attr_configuration_array but does not cascade. This is primarily useful for creating local configurations maintained in parallel with cascading configurations (for instance, with the same variable prefixes), for overriding the local configuration method, and for hiding the configuration variable.

== :attr_configuration_unique_array

:attr_configuration_unique_array provides inheritable array configurations that cascade downward. A composite sorted and unique array will be returned (merging downward from most distant ancestor to self). 

An internal cache is kept, and any configuration updates that occur to higher-level ancestors cascade immediately downward. 

The array maintained by :attr_configuration_unique_array is kept unique.

:attr_class_configuration_unique_array works like :attr_configuration_unique_array but does not cascade to instances.

:attr_local_configuration_unique_array works like :attr_configuration_unique_array but does not cascade. This is primarily useful for creating local configurations maintained in parallel with cascading configurations (for instance, with the same variable prefixes), for overriding the local configuration method, and for hiding the configuration variable (coming soon).

== :attr_configuration_sorted_array

:attr_configuration_sorted_array provides inheritable array configurations that cascade downward. A composite sorted and unique array will be returned (merging downward from most distant ancestor to self). 

An internal cache is kept, and any configuration updates that occur to higher-level ancestors cascade immediately downward. 

The array maintained by :attr_configuration_sorted_array is kept ordered.

:attr_class_configuration_sorted_array works like :attr_configuration_sorted_array but does not cascade to instances.

:attr_local_configuration_sorted_array works like :attr_configuration_sorted_array but does not cascade. This is primarily useful for creating local configurations maintained in parallel with cascading configurations (for instance, with the same variable prefixes), for overriding the local configuration method, and for hiding the configuration variable (coming soon).

== :attr_configuration_sorted_unique_array

:attr_configuration_sorted_unique_array provides inheritable array configurations that cascade downward. A composite sorted and unique array will be returned (merging downward from most distant ancestor to self). 

An internal cache is kept, and any configuration updates that occur to higher-level ancestors cascade immediately downward. 

The array maintained by :attr_configuration_sorted_unique_array is kept ordered and unique.

:attr_class_configuration_sorted_unique_array works like :attr_configuration_sorted_unique_array but does not cascade to instances.

:attr_local_configuration_sorted_unique_array works like :attr_configuration_sorted_unique_array but does not cascade. This is primarily useful for creating local configurations maintained in parallel with cascading configurations (for instance, with the same variable prefixes), for overriding the local configuration method, and for hiding the configuration variable (coming soon).

== :attr_configuration_hash

:attr_configuration_array provides inheritable hash configurations that cascade downward. A composite hash will be returned (merging downward from most distant ancestor to self). 

An internal cache is kept, and any configuration updates that occur to higher-level ancestors cascade immediately downward.

:attr_class_configuration_hash works like :attr_configuration_hash but does not cascade to instances.

:attr_local_configuration_hash works like :attr_configuration_hash but only cascades to the first including class. Subclasses will inherit but value will not be resolved through ancestor chain.

:attr_instance_configuration_hash works like :attr_configuration_hash but is only defined in instances of defining object. This means Modules and Classes will have an instance method defined, and that Subclasses will inherit but value will not be resolved through ancestor chain.

:attr_object_configuration_hash works like :attr_configuration_hash but does not cascade. This is primarily useful for creating local configurations maintained in parallel with cascading configurations (for instance, with the same variable prefixes), for overriding the local configuration method, and for hiding the configuration variable.

== Install

* sudo gem install cascading-configuration

== Usage

See README.md

== License

  (The MIT License)

  Copyright (c) 2011 Asher

  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  'Software'), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.